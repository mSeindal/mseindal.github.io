def octave_band_analyzer(sig, fs, range_hz = [31.5, 16000], plot = 'off', figNumber = 0):
    cF = np.array([4, 5, 6.3, 8, 10, 12.5,
                   16, 20, 25, 31, 39, 50, 63, 79, 99, 125,
                   157, 198, 250, 315, 397, 500, 630, 794,
                   1000, 1260, 1588, 2000, 2520, 3176, 4000,
                   5040, 6352, 8000, 10080, 12704,
                   16000, 20159])
    if fs == 44100:
        cF = cF[0:-2]


    idx1 = (np.abs(cF-range_hz[0])).argmin()
    idx2 = (np.abs(cF-range_hz[1])).argmin()
    cF = cF[idx1:idx2+1]

    nyquistRate = fs/2.0
    G = 2 # base 2
    factor = np.power(G, 1.0/6.0)
    lowerCutoffFrequency_Hz=cF/factor;
    upperCutoffFrequency_Hz=cF*factor;

    filteredsignal = np.zeros(shape=(len(sig), len(cF)))
    taller = 0
    for lower,upper in zip(lowerCutoffFrequency_Hz, upperCutoffFrequency_Hz):
        # Design filter
        sos = signal.butter( N=4, Wn=np.array([ lower,
        upper])/nyquistRate, btype='bandpass', analog=False,
        output='sos')
        filteredsignal[:,taller] = signal.sosfiltfilt(sos, sig)
        taller += 1

    if plot == 'on':
        plotThis = 10*np.log10(np.sqrt(np.mean(filteredsignal**2,0))**2/(20e-6**2))
        Nomial_cF = np.array([4, 5, 6.3, 8, 10, 12.5, 16, 20, 25, 31.5, 40,
                              50, 63, 80, 100, 125, 160, 200, 250, 315, 400,
                              500, 630, 800, 1000, 1250, 1600, 2000, 2500,
                              3150, 4000, 5000, 6300, 8000, 10000, 12500,
                              16000, 20000])

        Nomial_cF = Nomial_cF[idx1:idx2+2]
        plotThis = np.append(plotThis[0],plotThis)
        if figNumber == 0:
            plt.figure(num=None, figsize=(10, 5))
        else:
            plt.figure(num=figNumber, figsize=(10, 5))

        x = np.arange(0,len(plotThis))
        plt.step(x, plotThis)
        plt.xticks(np.arange(0.5, len(plotThis)), Nomial_cF, rotation='45')
        plt.xlim(0,len(plotThis)-1)
        plt.grid(True)
        plt.xlabel("Nomial Frequency [Hz]")
        plt.ylabel("Amplitude")
        plt.tight_layout(True)
        plt.show()

    return filteredsignal
